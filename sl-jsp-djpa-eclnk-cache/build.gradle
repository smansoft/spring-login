	
project (":sl-jsp-djpa-eclnk-cache") {

    apply plugin: 'maven'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'war'
	apply plugin: 'project-report'

    description = 'spring-login-web Webapp'

    dependencies {
        implementation project(':print-tool')

        implementation(group: 'javax.servlet',             name: 'jstl',                   	version: jstl_version)
        implementation(group: 'cglib',             		name: 'cglib',                   	version: cglib_version)

	    implementation(group: 'org.springframework.boot', 	name: 'spring-boot-starter-web', 	version: spring_boot_version) {
			exclude(group: 	'org.hibernate.validator')
			exclude(module: 'spring-boot-starter-logging')
	    }
   	    implementation(group: 'org.springframework.boot', 	name: 'spring-boot-starter-security', 		version: spring_boot_version)
   	    implementation(group: 'org.springframework.boot', 	name: 'spring-boot-starter-data-jpa', 		version: spring_boot_version) {
			exclude(group: 	'org.hibernate')
			exclude(group:	'org.hibernate.validator')
	    }
	    implementation(group: 'org.springframework.boot', 	name: 'spring-boot-starter-web', 			version: spring_boot_version)
	    implementation(group: 'org.springframework.boot', 	name: 'spring-boot-starter-tomcat', 		version: spring_boot_version)

  	    implementation(group: 'org.springframework.security', 	name: 'spring-security-core', 			version: spring_security_version)
  	    implementation(group: 'org.springframework.security', 	name: 'spring-security-config', 		version: spring_security_version)
  	    implementation(group: 'org.springframework.security', 	name: 'spring-security-web', 			version: spring_security_version)
  	    implementation(group: 'org.springframework.security', 	name: 'spring-security-taglibs', 		version: spring_security_version)

		implementation(group: 'org.apache.tiles', 			name: 'tiles-api', 							version: tiles_version)
		implementation(group: 'org.apache.tiles', 			name: 'tiles-core', 						version: tiles_version)
		implementation(group: 'org.apache.tiles', 			name: 'tiles-extras', 						version: tiles_version)

	    implementation(group: 'org.apache.tomcat.embed', 			name: 'tomcat-embed-jasper', 		version: tomcat_embed_jasper_version)
	    implementation(group: 'org.eclipse.jdt.core.compiler', 	    name: 'ecj', 						version: ecj_version)
	    implementation(group: 'org.webjars', 						name: 'bootstrap', 					version: bootstrap_version)

        implementation(group: 'mysql',							name: 'mysql-connector-java',   		version: mysql_connector_version)

        implementation(group: 'org.eclipse.persistence',		name: 'eclipselink',   					version: eclipselink_version) {
			exclude(group:	'org.eclipse.persistence', 	module:'javax.persistence')
			exclude(group:	'org.eclipse.persistence', 	module:'jakarta.persistence')
	    }

        implementation(group: 'org.eclipse.persistence',		name: 'javax.persistence',       		version: persistence_api_version)

        implementation(group: 'ch.qos.logback',    			name: 'logback-classic',        version: logback_version)
        implementation(group: 'ch.qos.logback',    			name: 'logback-core',        	version: logback_version)
        implementation(group: 'org.slf4j',         			name: 'jcl-over-slf4j',         version: slf4j_version)
        implementation(group: 'org.slf4j',         			name: 'slf4j-api',           	version: slf4j_version)

        testImplementation(group: 'org.springframework.boot',	name: 'spring-boot-starter-test',	version: spring_boot_version) {
			exclude(module: 'junit')
	    }
        testImplementation(group: 'org.junit.jupiter',	name: 'junit-jupiter',	version: junit_jupiter_version)
    }

    compileJava {
    	options.compilerArgs << compiler_debug_arg
    }


	war {
    	manifest {
        	attributes 'Main-Class': 'com.smansoft.sl.SpringLoginApplication'
	    }
	}

    assemble.doFirst {
    }

    assemble.doLast {
    }
    
    build.doFirst {
    }

    build.doLast {
    }

    task copyDependencies(type: Copy) {
        from (configurations.runtimeClasspath)
        into ("$target_root_dir/$bin_dir/$libs_dir")
        doFirst {
        }
        doLast {
        }
    }
    
   task zip(type: Zip) {
        from (war.archivePath)
        into("libs") {
            from configurations.runtime
        }    
        into("src") {
            from "$src_dir"
        }    
        doFirst {
        }
        doLast {
            copy {
                from (archivePath)
                into ("$target_root_dir/$bin_dir")
            }
        }
    }
    
    task copyJar(type: Copy) {
        from 	(war.archivePath)
        into 	("$target_root_dir/$bin_dir")
        doFirst {
        }
        doLast {
        }
    }

    task copyRenameJar(type: Copy) {
        from 	(war.archivePath)
        into 	("$target_root_dir/$bin_dir")
        rename 	("$war.archiveName","$war.baseName.$war.extension")
        doFirst {
        }
        doLast {
        }
    }
    
    task buildDeploy {
        dependsOn copyDependencies
        dependsOn zip
        dependsOn copyJar
        dependsOn copyRenameJar
    }

    task cleanRemove(type: Delete) {
		delete ("$target_root_dir/$bin_dir/$war.baseName.$war.extension",
			"$target_root_dir/$bin_dir/$war.archiveName",
			"$target_root_dir/$bin_dir/$war.baseName-$war.version"+".zip");
		delete ("$target_root_dir/$bin_dir/$libs_dir")
		delete ("$target_root_dir/$bin_dir/$logs_dir")
		delete ("$project.projectDir/$bin_dir")
    }

    task slwRun {
        doLast {
	    	tasks.bootRun.exec()
        }
	}

    clean.dependsOn(cleanRemove)
    build.dependsOn(buildDeploy)
}
